#include <unistd.h>
#include <sys/types.h>
#include <sys/wait.h>
#include <stdio.h>
#include <stdlib.h>

int main (int argc, char *argv[], char *envp[])
{
    int pid ; // identificador de processo

    pid = fork () ; // replicação do processo

    if ( pid < 0 ) // fork funcionou?
    {
        perror ("Erro: ") ; // não, encerra este processo
        exit (-1) ;
    }
    else // sim, fork funcionou
        if ( pid > 0 ) // sou o processo pai?
            wait (0) ; // sim, vou esperar meu filho concluir
        else // não, sou o processo filho
        {
            // carrega outro código binário para executar
            execve ("/bin/date", argv, envp) ;
            perror ("Erro: ") ; // execve não funcionou
        }
    printf ("Tchau !\n") ;
    exit(0) ; // encerra este processo
}

// init-+-cron
//      |-dhcpcd
//      |-getty
//      |-getty
//      |-ifplugd
//      |-ifplugd
//      |-lighttpd---php-cgi-+-php-cgi
//      |                    ‘-php-cgi
//      |-logsave
//      |-logsave
//      |-ntpd
//      |-openvpn
//      |-p910nd
//      |-rsyslogd-+-{rsyslogd}
//      |          ‘-{rsyslogd}
//      |-sshd---sshd---sshd---pstree
//      |-thd
//      ‘-udevd-+-udevd
//              ‘-udevd

// Exemplo de uso de threads Posix em C no Linux
// Compilar com gcc exemplo.c -o exemplo -lpthread

#include <pthread.h>
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>

#define NUM_THREADS 5

// cada thread vai executar esta função
void *print_hello (void *threadid)
{
    printf ("%ld: Hello World!\n", (long) threadid);
    sleep (5) ;
    printf ("%ld: Bye bye World!\n", (long) threadid);
    pthread_exit (NULL); // encerra esta thread
}

// thread "main" (vai criar as demais threads)
int main (int argc, char *argv[])
{
    pthread_t thread[NUM_THREADS];
    long status, i;

    // cria as demais threads
    for(i = 0; i < NUM_THREADS; i++)
    {
        printf ("Creating thread %ld\n", i);
        status = pthread_create (&thread[i], NULL, print_hello, (void *) i);

        if (status) // ocorreu um erro
        {
            perror ("pthread_create");
            exit (-1);
        }
    }

    // encerra a thread "main"
    pthread_exit (NULL);
}